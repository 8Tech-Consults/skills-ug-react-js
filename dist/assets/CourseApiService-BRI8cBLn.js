import{bh as a,bj as c}from"./index-DYlhEq0c.js";const t=a.create({baseURL:c,headers:{"Content-Type":"application/json",Accept:"application/json"}});t.interceptors.request.use(s=>{const e=localStorage.getItem("token");return e&&(s.headers.Authorization=`Bearer ${e}`),s},s=>Promise.reject(s));t.interceptors.response.use(s=>{if(s.data&&s.data.code!==void 0){if(s.data.code===1)return s.data;throw new Error(s.data.message||"API request failed")}return s.data},s=>{var e,r;throw console.error("Course API Error:",s),(r=(e=s.response)==null?void 0:e.data)!=null&&r.message?new Error(s.response.data.message):new Error(s.message||"Network error occurred")});class u{static async getCourseCategories(){try{return(await t.get("/course-categories")).data}catch(e){throw console.error("Error fetching course categories:",e),e}}static async getCourses(e){try{return(await t.get("/courses",{params:e})).data}catch(r){throw console.error("Error fetching courses:",r),r}}static async getCourse(e){try{return(await t.get(`/courses/${e}`)).data}catch(r){throw console.error("Error fetching course:",r),r}}static async subscribeToCourse(e,r){try{return(await t.post("/course-subscribe",{course_id:e,payment_method:r||"free"})).data}catch(o){throw console.error("Error subscribing to course:",o),o}}static async getMyCourseSubscriptions(){try{return(await t.get("/my-course-subscriptions")).data}catch(e){throw console.error("Error fetching course subscriptions:",e),e}}static async getCourseUnits(e){try{return(await t.get(`/learning/course-units/${e}`)).data}catch(r){throw console.error("Error fetching course units:",r),r}}static async getCourseMaterials(e){try{return(await t.get(`/learning/course-materials/${e}`)).data}catch(r){throw console.error("Error fetching course materials:",r),r}}static async getCourseQuizzes(e){try{return(await t.get(`/learning/course-quizzes/${e}`)).data}catch(r){throw console.error("Error fetching course quizzes:",r),r}}static async updateProgress(e){try{return(await t.post("/learning/progress",e)).data}catch(r){throw console.error("Error updating course progress:",r),r}}static async submitQuizAnswer(e){try{return(await t.post("/learning/quiz-answer",e)).data}catch(r){throw console.error("Error submitting quiz answer:",r),r}}static async getCourseForLearning(e){try{return(await t.get(`/learning/courses/${e}`)).data}catch(r){throw console.error("Error fetching course for learning:",r),r}}static async submitCourseReview(e){try{return(await t.post("/learning/course-review",e)).data}catch(r){throw console.error("Error submitting course review:",r),r}}static async getCourseReviews(e){try{return(await t.get(`/learning/course-reviews/${e}`)).data}catch(r){throw console.error("Error fetching course reviews:",r),r}}static async searchCourses(e,r){try{const o={search:e,...r};return(await t.get("/courses",{params:o})).data.data}catch(o){throw console.error("Error searching courses:",o),o}}static async getFeaturedCourses(){try{return(await t.get("/courses",{params:{featured:!0}})).data.data}catch(e){throw console.error("Error fetching featured courses:",e),e}}static async getCoursesByCategory(e){try{return(await t.get("/courses",{params:{category_id:e}})).data.data}catch(r){throw console.error("Error fetching courses by category:",r),r}}static async markMaterialAsViewed(e){try{return(await t.post("/learning/material-viewed",{material_id:e})).data}catch(r){throw console.error("Error marking material as viewed:",r),r}}static async getLearningStats(){try{return(await t.get("/learning/stats")).data}catch(e){throw console.error("Error fetching learning stats:",e),e}}static async getCourseCertificate(e){try{return(await t.get(`/learning/certificate/${e}`)).data}catch(r){throw console.error("Error fetching course certificate:",r),r}}}export{u as C};
