var m=Object.defineProperty;var w=(n,e,r)=>e in n?m(n,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):n[e]=r;var a=(n,e,r)=>w(n,typeof e!="symbol"?e+"":e,r);import{_ as p,N as y}from"./index-C-18IsR7.js";class i{constructor(){a(this,"id","");a(this,"created_at","");a(this,"updated_at","");a(this,"type","");a(this,"viewer_id","");a(this,"item_id","");a(this,"company_id","");a(this,"viewer_text","");a(this,"item_text","");a(this,"company_text","")}updateRecord(e){Object.assign(this,e)}toJSON(){const e={};for(const r in this)Object.prototype.hasOwnProperty.call(this,r)&&(e[r]=this[r]);return e}static fromJson(e){const r=new i;let t=typeof e=="string"?{}:e;if(typeof e=="string")try{t=JSON.parse(e)}catch{return r}const s=Object.keys(r);for(const o of Object.keys(t))s.includes(o)&&(r[o]=t[o]);return r}static async fetchMyViewRecords(e=1,r={}){try{const t=new URLSearchParams({page:String(e),...Object.fromEntries(Object.entries(r).map(([c,d])=>[c,String(d)]))}),s=await p(`/view-records?${t.toString()}`);if(s.code!==1)throw new Error(s.message||"Failed to fetch view records.");const o=s.data;return o.data=o.data.map(c=>i.fromJson(c)),o}catch(t){throw console.error("Error fetching my view records:",t),t}}static async fetchCompanyViewRecords(e=1,r={}){try{const t=new URLSearchParams({page:String(e),...Object.fromEntries(Object.entries(r).map(([c,d])=>[c,String(d)]))}),s=await p(`/company-view-records?${t.toString()}`);if(s.code!==1)throw new Error(s.message||"Failed to fetch company view records.");const o=s.data;return o.data=o.data.map(c=>i.fromJson(c)),o}catch(t){throw console.error("Error fetching company view records:",t),t}}static async createViewRecord(e){try{const r=await y("/view-record-create",e);if(r.code!==1)throw new Error(r.message||"Failed to create view record.");return i.fromJson(r.data)}catch(r){throw console.error("Error creating view record:",r),r}}}export{i as V};
